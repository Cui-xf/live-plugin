buildscript {
	repositories {
		mavenCentral()
		maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
		maven { url "http://dl.bintray.com/jetbrains/intellij-plugin-service" }
	}
}
plugins {
	id "nebula.dependency-lock" version "5.0.2"
	id "org.jetbrains.intellij" version "0.4.18"
	id "org.jetbrains.kotlin.jvm" version "1.3.72"
}
apply plugin:"java"
apply plugin:"groovy"
apply plugin:"idea"
apply plugin:"org.jetbrains.intellij"

repositories {
	mavenCentral()
	maven { setUrl("https://dl.bintray.com/dkandalov/maven") }
}

compileKotlin {
	kotlinOptions {
		jvmTarget = "11"
		apiVersion = "1.3"
		languageVersion = "1.3"
	}
}
ext.kotlinVersion = "1.3.72"

intellij {
	// (to find available IDE versions see https://www.jetbrains.com/intellij-repository/releases)
    def ideVersion = System.getenv().getOrDefault("IJ_VERSION",
			"201.6668.113" // Because of Inspections API changes (https://github.com/dkandalov/live-plugin/issues/102)
//			"LATEST-EAP-SNAPSHOT"
	)
	println("Using ide version: ${ideVersion}")
	version ideVersion
	// The artifact name is deliberately not "live-plugin" because plugins are stored in the "live-plugins" directory.
	// The "LivePlugin" directory is deleted on each plugin update so it's good make it distinct from "live-plugins".
	pluginName = "LivePlugin"
	downloadSources = true
	sameSinceUntilBuild = false
	updateSinceUntilBuild = false
	plugins = ["java", "Groovy", "Kotlin", "git4idea", "github", "junit"]
}
dependencyLock {
	lockFile = "../dependencyLock.json"
	configurationNames = ["runtime"]
	includeTransitives = true
}

dependencies {
	// Bundle kotlin compiler and stdlib with LivePlugin because they are not bundled with IDEs
	// and because kotlin jars in IDE are likely to be updated, potentially breaking liveplugins,
	// so it should be more reliable to have a particular version of kotlin jars inside LivePlugin.
	runtime "org.jetbrains.kotlin:kotlin-compiler-embeddable:$kotlinVersion"
	runtime "org.jetbrains.kotlin:kotlin-stdlib:$kotlinVersion"
	runtime "org.jetbrains.kotlin:kotlin-reflect:$kotlinVersion"
	runtime "live-plugin:kotlin-compiler-wrapper:0.3"
	testCompile group: "junit", name: "junit", version: "4.12" // includes hamcrest-core
}
"Move kotlin compiler jars from plugin classpath into a separate folder so that there are no conflicts between kotlin and intellij classes"()
"Add source files to compiler output so that LivePlugin source code is available for navigation at runtime"()
'Move GDSL file into standardDsls folder'()

sourceSets {
	// Keep groovy and kotlin util source code in separate source sets, otherwise
	// compilation fails because of inter-dependencies between kotlin and groovy files which confuse compiler,
	// even though overall dependencies are unidirectional:
	// pluginUtilKotlin -> pluginUtilGroovy -> main

	main {
		java { srcDir "src/main" }
		resources { srcDir "resources" }
		resources { srcDir "plugin-examples" }
	}
	pluginUtilGroovy {
		groovy { srcDir "src/plugin-util-groovy" }
		compileClasspath = main.output + configurations.compileClasspath + configurations.pluginUtilGroovyCompileClasspath
	}
	pluginUtilKotlin {
		kotlin { srcDir "src/plugin-util-kotlin" }
		compileClasspath = main.output + pluginUtilGroovy.output + configurations.compileClasspath + configurations.pluginUtilKotlinCompileClasspath
	}
	test {
		groovy { srcDir "src/test" }
		compileClasspath = main.output + pluginUtilGroovy.output + configurations.testCompileClasspath + configurations.pluginUtilGroovyCompileClasspath
		runtimeClasspath = test.output + main.output + pluginUtilGroovy.output +
			configurations.testRuntimeClasspath + configurations.pluginUtilGroovyRuntimeClasspath
	}
}

jar {
	from sourceSets.pluginUtilGroovy.output, sourceSets.pluginUtilKotlin.output
}

task validateLivePluginZip() { doLast {
	def pluginZip = zipTree("build/distributions/LivePlugin.zip")
	def pluginZipFiles = pluginZip.files.collect { it.path.replaceFirst(".*/LivePlugin.zip.*?/", "") }
	
	def kotlinCompilerAndItsTransitiveDependencies = [
			"LivePlugin/kotlin-compiler/kotlin-compiler-wrapper.jar",
			"LivePlugin/kotlin-compiler/kotlin-compiler-embeddable.jar",
			"LivePlugin/kotlin-compiler/kotlin-reflect.jar",
			"LivePlugin/kotlin-compiler/kotlin-stdlib.jar",
			"LivePlugin/kotlin-compiler/kotlin-stdlib-common.jar",
			"LivePlugin/kotlin-compiler/kotlin-script-runtime.jar",
			"LivePlugin/kotlin-compiler/trove4j.jar",
	]
	def expectedLivePluginJars = [
			"LivePlugin/lib/LivePlugin.jar",
			"LivePlugin/lib/annotations-13.0.jar",
			"LivePlugin/lib/searchableOptions.jar",
			"LivePlugin/lib/standardDsls/livePluginCompletions.gdsl",
	]
	expectToBeEqual(pluginZipFiles.toSet(), (expectedLivePluginJars + kotlinCompilerAndItsTransitiveDependencies).toSet())

	def livePluginJar = zipTree(pluginZip.files.find { it.name == "LivePlugin.jar" })
	def livePluginJarFiles = livePluginJar.files.collect{ it.path.replaceFirst(".*/LivePlugin.jar.*?/", "") }.toSet()
	expectToContain(livePluginJarFiles, [
		"liveplugin/LivePluginAppComponent.class",
		"liveplugin/PluginUtil.class",
		"liveplugin/PluginUtil.groovy",
		"liveplugin/Plugin_utilKt.class",
		"liveplugin/plugin-util.kt",
		"groovy/default-plugin.groovy",
		"kotlin/default-plugin.kts",
		"META-INF/plugin.xml",
	].toSet())
} }
build.finalizedBy(saveLock)
build.finalizedBy(validateLivePluginZip)

def expectToContain(Set actual, Set expected) {
	if (!actual.containsAll(expected)) {
		throw new GradleException(
			"Didn't contain expected:\n" +
			(expected - actual).join("\n") + "\n"
		)
	}
}
def expectToBeEqual(Set actual, Set expected) {
	if (actual != expected) {
		throw new GradleException(
			"Expected:\n" +
			expected.join("\n") + "\n" +
			"but was:\n" +
			actual.join("\n")
		)
	}
}

task installLivePlugin() { doLast {
	def version = new File("resources/META-INF/plugin.xml").readLines()
			.find { it.contains("<version>") }
			.replaceFirst(".*<version>", "")
			.replaceFirst("</version>.*", "")
	def localMavenPath = repositories.mavenLocal().url.path + "/liveplugin/live-plugin/"
	def toFile = "${localMavenPath}/${version}/live-plugin-${version}.jar"

	ant.copy(
		file: "LivePlugin.jar",
		toFile: toFile
	)

	println("Installed to local maven liveplugin version " + version)
	println("Path: ${toFile}")
} }

def "Add source files to compiler output so that LivePlugin source code is available for navigation at runtime"() {
	compileJava.doLast {
		def classesFolder = project.tasks.findByName(JavaPlugin.COMPILE_JAVA_TASK_NAME).destinationDir
		ant.copy(toDir: classesFolder.absolutePath, overwrite: true) {
			ant.fileset(dir: "./src/plugin-util-groovy", includes: "**/*")
			ant.fileset(dir: "./src/plugin-util-kotlin", includes: "**/*")
			ant.fileset(dir: "./src/main", includes: "**/KotlinScriptTemplate.kt")
		}
	}
}

def "Move kotlin compiler jars from plugin classpath into a separate folder so that there are no conflicts between kotlin and intellij classes"() {
	// Remove kotlin version from jars zipped with plugin so that when they are updated, 'LivePlugin' module dependencies are still correct.
	def filesToMove = [
		["kotlin-compiler-wrapper-0.3.jar", "kotlin-compiler-wrapper.jar"],
		["kotlin-compiler-embeddable-${kotlinVersion}.jar", "kotlin-compiler-embeddable.jar"],
		["kotlin-reflect-${kotlinVersion}.jar", "kotlin-reflect.jar"],
		["kotlin-stdlib-${kotlinVersion}.jar", "kotlin-stdlib.jar"],
		["kotlin-stdlib-common-${kotlinVersion}.jar", "kotlin-stdlib-common.jar"],
		["kotlin-script-runtime-${kotlinVersion}.jar", "kotlin-script-runtime.jar"],
		["trove4j-1.0.20181211.jar", "trove4j.jar"]
	]
	prepareSandbox.doLast {
		filesToMove.each {
			ant.move(
				file: "build/idea-sandbox/plugins/LivePlugin/lib/${it[0]}",
				tofile: "build/idea-sandbox/plugins/LivePlugin/kotlin-compiler/${it[1]}"
			)
		}
	}
}

def "Move GDSL file into standardDsls folder"() {
	prepareSandbox.doLast {
		def resourcesFolder = project.tasks.findByName(JavaPlugin.PROCESS_RESOURCES_TASK_NAME).destinationDir
		ant.move(
			file: resourcesFolder.absolutePath + "/liveplugin/livePluginCompletions.gdsl",
			tofile: "build/idea-sandbox/plugins/LivePlugin/lib/standardDsls/livePluginCompletions.gdsl"
		)
	}
}